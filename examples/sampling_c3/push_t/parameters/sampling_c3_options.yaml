num_outer_threads: 4
# options are 'stewart_and_trinkle' or 'anitescu'
##### WARNING: MAKE SURE THIS MATCHES THE franka_c3_options.yaml file.
contact_model: 'anitescu'
# These mu values are the effective friction coefficients for the represented
# contact pair. These values match how drake computes frictional coefficients.
# mu_effective = 2*mu1*mu2 / (mu1 + mu2). See urdfs for mu1 and mu2.
# The contact pairs are ordered as ee_jack, capsule1_ground, capsule2_ground,
# and capsule3_ground.
# TODO: The friction values are currently hardcoded for the 6 contact lcs.
mu: [[0.4165, 0.4615, 0.4615, 0.4615],
     [0.4165, 0.4165, 0.4615, 0.4615, 0.4615]]
    #,                    # num_contacts_index 0
    # [0.4615, 0.4615, 0.4615, 0.4615, 0.4615, 0.4615],     # num_contacts_index 1
    # [0.4615, 1, 0.4615, 0.4615, 0.4615],                  # num_contacts_index 2
    # [0.4615, 0.4615, 0.4615, 1, 0.4615, 0.4615, 0.4615],  # num_contacts_index 3
    # [0.4615, 0.4615, 0.4615, 0.4615, 0.4615],             # num_contacts_index 4
    # [0.4615, 0.4615, 0.4615, 0.4615, 0.4615,
    #  0.4615, 0.4615, 0.4615, 0.4615],                     # num_contacts_index 5
    # [0.4615, 0.4615, 0.4615, 0.4615, 0.4615]]             # num_contacts_index 6
planning_dt_position_tracking: 0.1
planning_dt: 0.05
execution_dt: 0.1   # unused
# If num_contacts_index is 0, then we use 1 ee-jack contact and 3 ground-jack
# contacts.
# If num_contacts_index is 1, then we use 6 contacts without resolving
# ee-jack contact.
# If num_contacts_index is 2, then we use 4 closest ee-jack contacts with an
# additional contact between ee and ground.
# If num_contacts_index is 3, then we use 6 ee-jack contacts with an additional
#  contact between ee and ground.
# If num_contacts_index is 4, then we use 1 ee-jack contact and 4 ground-jack
# contacts.
# If num_contacts_index is 5, then we use 3 ee-jack contact and 6 ground-jack
# contacts.
# If num_contacts_index is 6, then we use 2 ee-jack contact and 3 ground-jack
# contacts.
num_contacts_index: 0
num_contacts_index_for_cost: 1
num_contacts_index_for_curr_location: 0

# num_contacts changes based on the num_contacts_index.
num_contacts: [4,5]  #, 6, 5, 7, 5, 9, 5]
# If two numbers, the first is for ee-jack contact(s) and the second is for
# ground-jack contact(s).  If three, the middle is for the ee-ground contact.
resolve_contacts_to_list: [[1,3],
                           [2,3]] #,
                        #    [3,3],
                        #    [1,1,3],
                        #    [3,1,3],
                        #    [1,4],
                        #    [3,6],
                        #    [2,3]]
use_predicted_x0_c3: true
use_predicted_x0_repos: true
at_least_predict_first_planned_trajectory_knot: false
use_predicted_x0_reset_mechanism: true

# Penalty on matching projected variables
g_x: [900, 900, 900, 1, 1, 1, 1, 1, 1, 1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
g_gamma: [[1, 1, 1, 1],
          [1, 1, 1, 1, 1, 1]]
g_lambda_n: [[1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1]]
g_lambda_t: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
g_lambda: [[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
           [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005]] #,
        #    [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
        #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        #    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        #    [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],
        #    [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
        #    [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005]]
g_u: [30, 30, 30]

# Penalty on matching the QP variables
u_x: [10, 10, 10, 100, 100, 100, 100, 10, 10, 10, 8, 8, 8, 1, 1, 1, 1, 1, 1]
u_gamma: [[1, 1, 1, 1],
          [1, 1, 1, 1, 1, 1]]
u_lambda_n: [[1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1]]
u_lambda_t: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
# u_lambda is not used for the QP projection. It gets overwritten by alpha*F.
u_lambda: [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]  #,
            # [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            # [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            # [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            # [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]
u_u: [0.01, 0.01, 0.01]


# matrix scaling
w_Q: 45
w_R: 1
# Penalty on all decision variables, assuming scalar
w_G: 0.25
# Penalty on all decision variables, assuming scalar
w_U: 0.26

# If this is true, the portion of the Q matrix corresponding to the quaternions will be set based on the current and desired quaternion.
use_quaternion_dependent_cost: true
q_quaternion_dependent_weight: 1000
q_quaternion_dependent_regularizer_fraction: 0

# n_lambda = 2 * n_contacts + 2 * n_contacts * num_friction_directions
# size = n_x ( 7 + 3 + 6 + 3 ) + n_lambda (2 * 3  + 2 * 3 * 2) + n_u (3) = 40 for stewart and trinkle
# size = n_x ( 7 + 3 + 6 + 3 ) + n_lambda (2 * 3 * 2) + n_u (3) = 34 for anitescu
# g_size: 49
# u_size: 49
#g_size: 34
#u_size: 34

# State Tracking Error, assuming diagonal
# state ordering: [xee, yee, zee, qbw, qbx, qby, qbz, xb, yb, zb,
#                  veex, veey, veez, wbx, wby, wbz, vbx, vby, vbz]
# ORIENTATION GOAL GAINS
q_vector_position_and_orientation: [
           0.01, 0.01, 0.01,        # end effector position
           0.1, 0.1, 0.1, 0.1,              # object orientation
           600, 600, 600,    # object position
           5, 5, 5,              # end effector linear velocity
           0.05, 0.05, 0.05,                 # object angular velocity
           0.05, 0.05, 0.05]           # object linear velocity

# POSITION GOAL GAINS

gamma_position_tracking: 1.0  # discount factor on MPC costs
# Penalty on matching projected variables
g_x_position_tracking: [900, 900, 900, 1, 1, 1, 1, 1, 1, 1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1]
g_gamma_position_tracking: [[1, 1, 1, 1],
          [1, 1, 1, 1, 1, 1]]
g_lambda_n_position_tracking: [[1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1]]
g_lambda_t_position_tracking: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
g_lambda_position_tracking: [
           [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005],
           [0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005]] #,
g_u_position_tracking: [30, 30, 30]

# Penalty on matching the QP variables
u_x_position_tracking: [10, 10, 10, 100, 100, 100, 100, 10, 10, 10, 8, 8, 8, 1, 1, 1, 1, 1, 1]
u_gamma_position_tracking: [[1, 1, 1, 1],
          [1, 1, 1, 1, 1, 1]]
u_lambda_n_position_tracking: [[1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1]]
u_lambda_t_position_tracking: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
# u_lambda is not used for the QP projection. It gets overwritten by alpha*F.
u_lambda_position_tracking: [
            [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]   #,
u_u_position_tracking: [0.01, 0.01, 0.01]

# matrix scaling
w_Q_position_tracking: 45
w_R_position_tracking: 1
# Penalty on all decision variables, assuming scalar
w_G_position_tracking: 0.25
# Penalty on all decision variables, assuming scalar
w_U_position_tracking: 0.26
q_vector: [0.01, 0.01, 0.01,        # end effector position
           0.1, 0.1, 0.1, 0.1,              # object orientation
           250, 250, 250,    # object position
           5, 5, 5,              # end effector linear velocity
           0.05, 0.05, 0.05,                 # object angular velocity
           0.05, 0.05, 0.05]           # object linear velocity

# Penalty on end effector (x,y,z) force efforts, assuming diagonal
r_vector: [0.01, 0.01, 0.01]