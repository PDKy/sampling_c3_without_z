#pragma once
#include "drake/systems/framework/leaf_system.h"
#include <vector>
#include "Eigen/Dense"
#include <drake/perception/point_cloud.h>
#include "Eigen/Core"


namespace dairlib {

using drake::perception::PointCloud;

namespace systems {

class PointCloudFromSampleBuffer: public drake::systems::LeafSystem<double> {
  // This is a system that reads the sample_buffer over lcm and outputs a Drake
  // PointCloud for visualization.
 public:
  PointCloudFromSampleBuffer();

  // Input ports
  const drake::systems::InputPort<double>& get_input_port_lcmt_sample_buffer() const {
    return this->get_input_port(lcmt_sample_buffer_input_port_);
  }
  const drake::systems::InputPort<double>& get_input_port_new_sample_costs() const {
    return this->get_input_port(new_sample_costs_input_port_);
  }

  // Output port
  const drake::systems::OutputPort<double>&
    get_output_port_sample_buffer_point_cloud() const {
      return this->get_output_port(point_cloud_output_port_);
    }

 private:
  void OutputSampleBufferAsPointCloud(
        const drake::systems::Context<double>& context,
        PointCloud* sample_buffer_point_cloud) const;

  drake::systems::InputPortIndex new_sample_costs_input_port_;
  drake::systems::InputPortIndex lcmt_sample_buffer_input_port_;
  drake::systems::OutputPortIndex point_cloud_output_port_;

  Eigen::VectorXf color_floats_;
  Eigen::MatrixXi RGBs_;

  const int n_colors_ = 100;

  // Generates samples of a matplotlib colormap RdYlGn.reversed() for coloring
  // the point cloud.
  inline Eigen::VectorXf colorFloatMap() {
    Eigen::VectorXf color_floats(n_colors_);
    color_floats <<
      0.0, 0.010101010101010102, 0.020202020202020204, 0.030303030303030304,
      0.04040404040404041, 0.050505050505050504, 0.06060606060606061,
      0.0707070707070707, 0.08080808080808081, 0.09090909090909091,
      0.10101010101010101, 0.1111111111111111, 0.12121212121212122,
      0.13131313131313133, 0.1414141414141414, 0.15151515151515152,
      0.16161616161616163, 0.1717171717171717, 0.18181818181818182,
      0.1919191919191919, 0.20202020202020202, 0.21212121212121213,
      0.2222222222222222, 0.23232323232323232, 0.24242424242424243,
      0.25252525252525254, 0.26262626262626265, 0.2727272727272727,
      0.2828282828282828, 0.29292929292929293, 0.30303030303030304,
      0.31313131313131315, 0.32323232323232326, 0.3333333333333333,
      0.3434343434343434, 0.35353535353535354, 0.36363636363636365,
      0.37373737373737376, 0.3838383838383838, 0.3939393939393939,
      0.40404040404040403, 0.41414141414141414, 0.42424242424242425,
      0.43434343434343436, 0.4444444444444444, 0.45454545454545453,
      0.46464646464646464, 0.47474747474747475, 0.48484848484848486,
      0.494949494949495, 0.5050505050505051, 0.5151515151515151,
      0.5252525252525253, 0.5353535353535354, 0.5454545454545454,
      0.5555555555555556, 0.5656565656565656, 0.5757575757575758,
      0.5858585858585859, 0.5959595959595959, 0.6060606060606061,
      0.6161616161616161, 0.6262626262626263, 0.6363636363636364,
      0.6464646464646465, 0.6565656565656566, 0.6666666666666666,
      0.6767676767676768, 0.6868686868686869, 0.696969696969697,
      0.7070707070707071, 0.7171717171717171, 0.7272727272727273,
      0.7373737373737373, 0.7474747474747475, 0.7575757575757576,
      0.7676767676767676, 0.7777777777777778, 0.7878787878787878,
      0.797979797979798, 0.8080808080808081, 0.8181818181818182,
      0.8282828282828283, 0.8383838383838383, 0.8484848484848485,
      0.8585858585858586, 0.8686868686868687, 0.8787878787878788,
      0.8888888888888888, 0.898989898989899, 0.9090909090909091,
      0.9191919191919192, 0.9292929292929293, 0.9393939393939394,
      0.9494949494949495, 0.9595959595959596, 0.9696969696969697,
      0.9797979797979798, 0.98989898989899, 1.0;
    return color_floats;
  }
  inline Eigen::MatrixXi RGBMap() {
    Eigen::MatrixXi mat(n_colors_, 3);
    mat << 0, 104, 55,
           2, 108, 57,
           5, 113, 60,
           7, 117, 62,
           10, 123, 65,
           12, 127, 67,
           15, 132, 70,
           18, 138, 73,
           20, 142, 75,
           23, 147, 78,
           25, 151, 80,
           33, 156, 82,
           42, 160, 84,
           48, 163, 86,
           57, 167, 88,
           63, 170, 89,
           72, 174, 92,
           78, 177, 93,
           87, 182, 95,
           96, 186, 98,
           102, 189, 99,
           110, 192, 100,
           115, 194, 100,
           122, 198, 101,
           130, 201, 102,
           135, 203, 103,
           142, 207, 103,
           147, 209, 104,
           155, 212, 105,
           160, 214, 105,
           167, 217, 107,
           173, 220, 111,
           177, 222, 113,
           183, 224, 117,
           187, 226, 120,
           193, 229, 123,
           199, 231, 127,
           203, 233, 130,
           209, 236, 134,
           213, 237, 136,
           218, 240, 141,
           223, 242, 147,
           226, 243, 151,
           230, 245, 157,
           233, 246, 161,
           238, 248, 168,
           241, 249, 172,
           245, 251, 178,
           250, 253, 184,
           253, 254, 188,
           255, 253, 188,
           255, 251, 184,
           255, 247, 178,
           255, 243, 172,
           255, 241, 168,
           254, 237, 161,
           254, 235, 157,
           254, 231, 151,
           254, 229, 147,
           254, 225, 141,
           254, 220, 136,
           254, 216, 132,
           254, 210, 127,
           254, 206, 124,
           254, 200, 119,
           253, 195, 114,
           253, 191, 111,
           253, 185, 106,
           253, 181, 103,
           253, 175, 98,
           252, 168, 94,
           251, 163, 92,
           250, 155, 88,
           250, 150, 86,
           249, 142, 82,
           248, 137, 80,
           247, 129, 76,
           246, 122, 73,
           245, 117, 71,
           244, 109, 67,
           242, 104, 65,
           238, 97, 62,
           235, 90, 58,
           233, 85, 56,
           229, 78, 53,
           227, 73, 51,
           224, 66, 47,
           221, 61, 45,
           218, 54, 42,
           214, 47, 39,
           210, 43, 39,
           204, 38, 39,
           200, 34, 39,
           194, 28, 39,
           189, 23, 38,
           185, 19, 38,
           179, 13, 38,
           175, 9, 38,
           169, 4, 38,
           165, 0, 38;
    return mat;
  }
};

}  // namespace systems
}  // namespace dairlib
